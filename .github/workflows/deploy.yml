name: Deploy

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 9 * * 1'

permissions:
  contents: write  # Gives permission to push tags and commits

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      GOOGLE_DRIVE_FOLDER_ID_TEST: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID_TEST }}
      GPX_FILES_DIR: gpx-files-real-data
      TRACES_FILE_PATH: traces-real/traces.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Authenticate with Google Drive
        run: |
          echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > credentials.json

      - name: Install googleapis library
        run: npm install googleapis

      - name: Check Dependabot alerts
        run: npm audit

      - name: Run unit tests
        id: tests
        run: node --experimental-vm-modules node_modules/.bin/jest
        continue-on-error: ${{ github.event_name == 'schedule' }}

      - name: Check code coverage
        if: success() || github.event_name == 'schedule'
        run: node --experimental-vm-modules node_modules/.bin/jest --coverage
        continue-on-error: ${{ github.event_name == 'schedule' }}

      - name: Upload coverage report to CODECOV
        if: success() || github.event_name == 'schedule'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Tag current version if scheduled and tests passed
        id: create_tag
        if: github.event_name == 'schedule' && steps.tests.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_AUTO_MERGE }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          DATE_TAG=$(date +"%Y.%m.%d")
          NEW_TAG="v$DATE_TAG"
          echo "Creating new tag: $NEW_TAG"
          git tag -a "$NEW_TAG" -m "Automated release on $DATE_TAG"
          git push origin "$NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Run pre-build script
        if: success() || github.event_name == 'schedule'
        run: node --experimental-vm-modules scripts/run-process-gpx.js

      - name: Build website
        if: success() || github.event_name == 'schedule'
        run: npm run build

      - name: Generate documentation in dist/docs folder
        if: success() || github.event_name == 'schedule'
        run: node --experimental-vm-modules node_modules/.bin/jsdoc -c jsdoc.json

      - name: Fetch last tagged version if tests failed
        id: fetch_last_tag
        if: github.event_name == 'schedule' && steps.tests.outcome == 'failure'
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Using previous stable tag: $LAST_TAG"
          git checkout $LAST_TAG
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          # Re-run build process with the stable version
          npm install
          node --experimental-vm-modules scripts/run-process-gpx.js
          npm run build
          npm run generate-docs

      - name: Set tag info for release notes
        id: tag_info
        if: github.event_name == 'schedule'
        run: |
          if [ "${{ steps.tests.outcome }}" == "success" ]; then
            CURRENT_TAG="${{ steps.create_tag.outputs.new_tag }}"
            echo "tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
            echo "message=✅ Tests passed. Deployed new version $CURRENT_TAG" >> $GITHUB_OUTPUT
          else
            CURRENT_TAG="${{ steps.fetch_last_tag.outputs.last_tag }}"
            echo "tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
            echo "message=⚠️ Tests failed. Deployed previous stable version $CURRENT_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to GitHub Pages (release)
        if: github.event_name == 'release' || github.event_name == 'schedule'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./dist
          keep_files: dev/
          commit_message: "${{ steps.tag_info.outputs.message || 'Deploy to GitHub Pages' }}"

      - name: Deploy to GitHub Pages (dev)
        if: github.event_name != 'release' && github.event_name != 'schedule'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./dist
          destination_dir: dev
